import { env } from {{#if js}}"./common/config/env.js"{{else}}"@/common/config/env"{{/if}};
import express from 'express';
{{#if socket}}
import { Server } from 'socket.io';
import { SocketService } from {{#if js}}"./services/socket.service.js"{{else}}"@/services/socket.service"{{/if}};
import http from 'http';
{{/if}}
import cookieParser from "cookie-parser";
import helmet from "helmet";
import cors, { CorsOptions } from "cors";
import errorMiddleware from {{#if js}}"./common/middlewares/error.middleware.js"{{else}}"@/common/middlewares/error.middleware"{{/if}};
// routes
import healthRouter from {{#if js}}"./features/health/health.route.js"{{else}}"@/features/health/health.route"{{/if}};
{{#if auth.enable}}
import authRouter from {{#if js}}"./features/user/user.route.js"{{else}}"@/features/user/user.route"{{/if}};
{{/if}}

{{#if socket}}
const socketService = new SocketService();
{{/if}}

const app = express();
{{#if socket}}
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: env.ACCESS_CONTROL_ORIGIN,
    methods: ["GET", "POST"],
  },
  transports: ["websocket"],
});
{{/if}}

const corsOptions{{#if ts}}: CorsOptions{{/if}} = {
  origin: env.ACCESS_CONTROL_ORIGIN,
  credentials: true,
  methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  optionsSuccessStatus: 200,
};

{{#if js}}
const swaggerSpec = swaggerJsdoc({
  definition: {
    openapi: "3.0.0",
    info: {
      title: {{name}},
      version: "1.0.0",
    },
  },
  apis: ["./routes/*.js", "./controllers/*.js"],
});
{{/if}}

app.use(cookieParser());
app.use(helmet())
app.use(cors(corsOptions));
app.use(express.json({ limit: "16kb" }));
app.use(express.urlencoded({ extended: true, limit: "16kb" }));
app.use(express.static("public"));

{{#if socket}}
io.on('connection', (socket) => {
  socketService.listenSocket(socket);
});
{{/if}}

// routes
app.use("/api/v1/health", healthRouter)
{{#if auth.enable}}
app.use("/api/v1/auth", authRouter)
{{/if}}

app.use(errorMiddleware.notFoundErrorHandler);
app.use(errorMiddleware.generalErrorHandler);

{{#if socket}}
export { server, app, io };
{{else}}
export { app };
{{/if}}