{{#if ts}}
import { NextFunction, Request, Response } from "express";
import jwt, { JwtPayload } from "jsonwebtoken";
import { env } from "@/conf/env";
import { ApiError } from "@/utils/ApiError";
import handleError from "@/utils/HandleError";
{{#if usePrisma}}
import prisma from "@/db/index";
{{/if}}
{{#if useDrizzle}}
import { eq } from "drizzle-orm";
import db from "@/db/index.js";
import { UserTable } from "@/db/schema";
{{/if}}
{{#if useMongodb}}
import { toObjectId } from "@/utils/toObject";
import UserModel from "@/models/user.model";
{{/if}}
{{else}}
import jwt from "jsonwebtoken";
import { env } from "../conf/env.js";
import { ApiError } from "../utils/ApiError.js";
import handleError from "../utils/HandleError.js";
{{#if usePrisma}}
import prisma from "../db/index.js";
{{/if}}
{{#if useDrizzle}}
import { eq } from "drizzle-orm";
import db from "../db/index.js";
import { UserTable } from "../db/schema";
{{/if}}
{{#if useMongodb}}
import { toObjectId } from "../utils/toObject.js";
import UserModel from "../models/user.model.js";
{{/if}}
{{/if}}

const verifyUserJWT = async ({{#if ts}}
  req: Request,
  res: Response,
  next: NextFunction,
{{else}}req, res, next{{/if}}) => {
  try {
    const token =
      req.cookies?.accessToken ||
      req.header("Authorization")?.replace("Bearer ", "");

    if (!token) {
      throw new ApiError({
        statusCode: 401,
        message: "Unauthorized",
        data: { service: "authMiddleware.verifyUserJWT" },
      });
    }

    const decodedToken = jwt.verify(
      token,
      env.ACCESS_TOKEN_SECRET
    ){{#if ts}} as JwtPayload{{/if}};

    if (!decodedToken || typeof decodedToken == "string") {
      throw new ApiError({
        statusCode: 401,
        message: "Invalid Access Token",
        code: "INVALID_ACCESS_TOKEN",
        data: { service: "authMiddleware.verifyUserJWT" },
      });
    }

{{#if useMongodb}}
    const user = await UserModel.findById(toObjectId(decodedToken._id));
{{/if}}
{{#if usePrisma}}
    const user = await prisma.user.findUnique({
      where: {
        id: decodedToken.id,
      },
    });
{{/if}}
{{#if useDrizzle}}
    const user = await db.query.users.findFirst({
      where: eq(UserTable.id, decodedToken.id),
    });
{{/if}}

    if (!user) {
      throw new ApiError({
        statusCode: 401,
        message: "User not found",
        code: "USER_NOT_FOUND",
        data: { service: "authMiddleware.verifyUserJWT" },
      });
    }

    if (!user.refreshToken) {
      throw new ApiError({
        statusCode: 401,
        message: "Refresh token session is not valid",
        code: "INVALID_SESSION",
        data: { service: "authMiddleware.verifyUserJWT" },
      });
    }

    const mappedUser = {
      ...user,
      password: null,
      refreshToken: null,
    };

    req.body.user = mappedUser;
    next();
  } catch (error) {
    handleError(error, res, "Invalid Access Token", "UNAUTHORIZED");
  }
};

export { verifyUserJWT };
